---
import ButtonLink from "../components/ButtonLink.astro";
import ProjectVideo from "../components/ProjectVideo.astro";
import ArrowUpRight from "../components/svg/ArrowUpRight.astro";
import Back from "../components/svg/Back.astro";
import GitHub from "../components/svg/GitHub.astro";
import { projects } from "../data/projects";
import Layout from "../layouts/Layout.astro";

export const getStaticPaths = () => {
  return projects.map((project) => ({
    params: { project: project.id },
    props: { ...project },
  }));
};

const { id, name, videoSrc, projectUrl, gitHubUrl, builtWith, description } =
  Astro.props;
---

<Layout>
  <header>
    <a class="logo" href="/">
      <Back transitionName="logo-back" />
      <span transition:name="logo-name">Daniel Alzein</span>
    </a>
    <div class="project-header" transition:name="project-header">
      <h1>{name}</h1>
      <div class="actions">
        {
          gitHubUrl && (
            <ButtonLink href={gitHubUrl} target="_blank">
              <GitHub />
              <span class="link-text">GitHub</span>
            </ButtonLink>
          )
        }
        {
          projectUrl && (
            <ButtonLink href={projectUrl} target="_blank">
              <span class="link-text">Visit</span>
              <ArrowUpRight />
            </ButtonLink>
          )
        }
      </div>
    </div>
  </header>
  <main>
    <a
      href={projectUrl || gitHubUrl}
      target="_blank"
      class="active video-wrapper"
    >
      <ProjectVideo videoSrc={videoSrc} transitionName={id} />
    </a>
    <div class="details" transition:name="project-details">
      <div class="built-with">
        {builtWith.map((tool) => <span class="built-with-tool">{tool}</span>)}
      </div>
      <div class="description">
        {description.map((text) => <p>{text}</p>)}
      </div>
    </div>
  </main>
</Layout>

<style>
  header {
    margin-bottom: 0;
  }

  h1 {
    font-size: 1.5rem;
  }

  main {
    display: flex;
    flex-direction: column;
  }

  header {
    padding: 2rem 0;
    position: relative;
    display: flex;
    align-items: center;
  }

  .project-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
  }

  .video-wrapper {
    container-type: inline-size;
  }

  .logo {
    position: absolute;
    left: -12rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: color 250ms ease;
    text-decoration: none;
    color: var(--foreground-secondary);
  }

  .logo:hover {
    color: var(--foreground);
  }

  .logo:hover :global(svg) {
    color: var(--foreground);
  }

  :global(body) {
    max-width: 50rem !important;
  }

  .actions {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .actions :global(svg) {
    color: var(--background);
  }

  .details {
    margin-top: 2rem;
  }

  .built-with {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .built-with-tool {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 2.25rem;
    border-radius: 2.25rem;
    padding: 0 1rem;
    font-size: 0.875rem;
    border: 1px solid var(--border);
    color: var(--foreground-secondary);
  }

  .description {
    margin-top: 2rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    color: var(--foreground-secondary);
  }

  p {
    line-height: 2;
  }

  @media (max-width: 768px) {
    .link-text {
      display: none;
    }

    :global(.button-link) {
      padding: 0 !important;
      width: 3rem !important;
    }
  }

  @media (max-width: 1280px) {
    header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .logo {
      position: relative;
      left: inherit;
    }
  }
</style>
